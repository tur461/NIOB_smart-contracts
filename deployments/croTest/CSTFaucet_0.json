{
  "address": "0xA189e169181b64fE5Cf152b88A455e93B5Aa5d87",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimAmount_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimee_",
          "type": "address"
        }
      ],
      "name": "hasClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAmount_",
          "type": "uint256"
        }
      ],
      "name": "setClaimAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc2d242419a051fdb75c85a80ea9236aed54ba217ad57e86aa09f1209a4ad70d6",
  "receipt": {
    "to": null,
    "from": "0x84fF670281055e51FE317c0A153AAc2D26619798",
    "contractAddress": "0xA189e169181b64fE5Cf152b88A455e93B5Aa5d87",
    "transactionIndex": 0,
    "gasUsed": "349713",
    "logsBloom": "0x
    "blockHash": "0x88072bfd57b1308d5c7d433b2d35d25663d0d93efd8400f113457e924888987f",
    "transactionHash": "0xc2d242419a051fdb75c85a80ea9236aed54ba217ad57e86aa09f1209a4ad70d6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3309174,
        "transactionHash": "0xc2d242419a051fdb75c85a80ea9236aed54ba217ad57e86aa09f1209a4ad70d6",
        "address": "0xA189e169181b64fE5Cf152b88A455e93B5Aa5d87",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000084ff670281055e51fe317c0a153aac2d26619798"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x88072bfd57b1308d5c7d433b2d35d25663d0d93efd8400f113457e924888987f"
      }
    ],
    "blockNumber": 3309174,
    "cumulativeGasUsed": "349713",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "d0c1f07bcac0fc61ed5d762a3f6e903f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimee_\",\"type\":\"address\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount_\",\"type\":\"uint256\"}],\"name\":\"setClaimAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/misc/CSTFaucet.sol\":\"CSTFaucet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IMintableERC20 {\\r\\n    function mint(address, uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xdd8c53207e4f36f616a4de893c31cd69fe4d570c3e4bbd316d724a5b65f97abb\",\"license\":\"MIT\"},\"contracts/misc/CSTFaucet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../interfaces/IMintableERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract CSTFaucet is Ownable {\\r\\n  address _token;\\r\\n  uint256 _claimAmount;\\r\\n  mapping(address => bool) _claimed;\\r\\n  \\r\\n  event Claimed(address indexed, uint256);\\r\\n\\r\\n  constructor(uint256 claimAmount_) {\\r\\n    _claimAmount = claimAmount_;\\r\\n  }\\r\\n  \\r\\n  function setToken(address token_) external onlyOwner {\\r\\n    _token = token_;\\r\\n  }\\r\\n\\r\\n  function setClaimAmount(uint256 newAmount_) external onlyOwner {\\r\\n    _claimAmount = newAmount_;\\r\\n  }\\r\\n\\r\\n  function hasClaimed(address claimee_) external view returns(bool) {\\r\\n    return _claimed[claimee_];\\r\\n  }\\r\\n\\r\\n  function claim() external {\\r\\n    require(!_claimed[msg.sender], 'already claimed!');\\r\\n    _claimed[msg.sender] = true;\\r\\n    IMintableERC20(_token).mint(msg.sender, _claimAmount);\\r\\n    emit Claimed(msg.sender, _claimAmount);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xc98d3898b08d96f20304d4760777ba6c9bdbaaad23a288de4bc947896ba9cf4b\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161053a38038061053a83398101604081905261002f91610090565b61003833610040565b6002556100a9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100a257600080fd5b5051919050565b610482806100b86000396000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c8063144fa6d7146100725780634e71d92d14610087578063715018a61461008f57806373b2e80e146100975780638da5cb5b146100d8578063b1c7ef0c146100f8578063f2fde38b1461010b575b600080fd5b6100856100803660046103f7565b61011e565b005b610085610178565b610085610289565b6100c36100a53660046103f7565b6001600160a01b031660009081526003602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100e06102c4565b6040516001600160a01b0390911681526020016100cf565b610085610106366004610427565b6102d3565b6100856101193660046103f7565b610307565b336101276102c4565b6001600160a01b0316146101565760405162461bcd60e51b815260040161014d90610440565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526003602052604090205460ff16156101cb5760405162461bcd60e51b815260206004820152601060248201526f616c726561647920636c61696d65642160801b604482015260640161014d565b3360008181526003602052604090819020805460ff191660019081179091555460025491516340c10f1960e01b8152600481019390935260248301919091526001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561023757600080fd5b505af115801561024b573d6000803e3d6000fd5b50506002546040519081523392507fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a915060200160405180910390a2565b336102926102c4565b6001600160a01b0316146102b85760405162461bcd60e51b815260040161014d90610440565b6102c260006103a7565b565b6000546001600160a01b031690565b336102dc6102c4565b6001600160a01b0316146103025760405162461bcd60e51b815260040161014d90610440565b600255565b336103106102c4565b6001600160a01b0316146103365760405162461bcd60e51b815260040161014d90610440565b6001600160a01b03811661039b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161014d565b6103a4816103a7565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561040957600080fd5b81356001600160a01b038116811461042057600080fd5b9392505050565b60006020828403121561043957600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea164736f6c634300080b000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061006d5760003560e01c8063144fa6d7146100725780634e71d92d14610087578063715018a61461008f57806373b2e80e146100975780638da5cb5b146100d8578063b1c7ef0c146100f8578063f2fde38b1461010b575b600080fd5b6100856100803660046103f7565b61011e565b005b610085610178565b610085610289565b6100c36100a53660046103f7565b6001600160a01b031660009081526003602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100e06102c4565b6040516001600160a01b0390911681526020016100cf565b610085610106366004610427565b6102d3565b6100856101193660046103f7565b610307565b336101276102c4565b6001600160a01b0316146101565760405162461bcd60e51b815260040161014d90610440565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526003602052604090205460ff16156101cb5760405162461bcd60e51b815260206004820152601060248201526f616c726561647920636c61696d65642160801b604482015260640161014d565b3360008181526003602052604090819020805460ff191660019081179091555460025491516340c10f1960e01b8152600481019390935260248301919091526001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561023757600080fd5b505af115801561024b573d6000803e3d6000fd5b50506002546040519081523392507fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a915060200160405180910390a2565b336102926102c4565b6001600160a01b0316146102b85760405162461bcd60e51b815260040161014d90610440565b6102c260006103a7565b565b6000546001600160a01b031690565b336102dc6102c4565b6001600160a01b0316146103025760405162461bcd60e51b815260040161014d90610440565b600255565b336103106102c4565b6001600160a01b0316146103365760405162461bcd60e51b815260040161014d90610440565b6001600160a01b03811661039b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161014d565b6103a4816103a7565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561040957600080fd5b81356001600160a01b038116811461042057600080fd5b9392505050565b60006020828403121561043957600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea164736f6c634300080b000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/misc/CSTFaucet.sol:CSTFaucet",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 844,
        "contract": "contracts/misc/CSTFaucet.sol:CSTFaucet",
        "label": "_token",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 846,
        "contract": "contracts/misc/CSTFaucet.sol:CSTFaucet",
        "label": "_claimAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 850,
        "contract": "contracts/misc/CSTFaucet.sol:CSTFaucet",
        "label": "_claimed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}